<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" /> 

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.mycompany.myapp" />

	<!-- A를 관리 객체로 생성-->
	<beans:bean name="a" class="com.mycompany.myapp.exam09.A"/> <!-- 여기서 객체를 만들 때는 기본생성자를 이용해서 만든다!! -->
	
	<!-- B를 관리 객체로 생성-->
	<beans:bean name="b" class="com.mycompany.myapp.exam09.B"/>
	
	<!-- ServiceA를 관리 객체로 생성 -->
	<beans:bean name="serviceA" class="com.mycompany.myapp.exam09.ServiceA"/>
	
	<!-- ServiceB를 관리 객체로 생성 -->
	<beans:bean name="serviceB" class="com.mycompany.myapp.exam09.ServiceB"/>

	<!-- ServiceCImpl1를 관리 객체로 생성 -->
	<beans:bean name="serviceCImpl1" class="com.mycompany.myapp.exam09.ServiceCImpl1"/> <!-- class경로의 숫자만 바꿔주면 다른 클래스를 주입할 수 있다. -->
		
	<!-- ServiceCImpl2를 관리 객체로 생성 -->
	<beans:bean name="serviceCImpl2" class="com.mycompany.myapp.exam09.ServiceCImpl2"/>
	
	<!-- C를 관리 객체로 생성 -->
	<beans:bean name="c" class="com.mycompany.myapp.exam09.C">
		<beans:constructor-arg ref="d"/>	
	</beans:bean>
	
	<!-- D를 관리 객체로 생성 -->
	<beans:bean name="d" class="com.mycompany.myapp.exam09.D"/>
	
	<!-- E를 관리 객체로 생성 -->
	<beans:bean name="e" class="com.mycompany.myapp.exam09.E">
		<beans:constructor-arg ref="b"/>
		<beans:constructor-arg ref="d"/>	
	</beans:bean>
	
	<!-- F를 관리 객체로 생성 -->
	<beans:bean name="f" class="com.mycompany.myapp.exam09.F">
		<beans:constructor-arg ref="serviceA"/>
		<beans:constructor-arg ref="serviceB"/>
		<beans:constructor-arg ref="serviceCImpl1"/>
	</beans:bean>
	
	
	<!-- Exam09Controller 객체를 찾아서 가져오기 --> <!-- id가 없을 땐 id를 클래스명으로 한다. 단 첫글자를 소문자로!! -->
	<beans:bean name="exam09Controller" class="com.mycompany.myapp.exam09.Exam09Controller">
		<!-- Setter 주입 -->
		<!-- <beans:property name="setter이름" ref="매개값으로 전달할 객체(관리객체이름)"/> -->
		<beans:property name="a" ref="a"/>
		<beans:property name="b" ref="b"/>  <!-- property는 setter메소드 호출. set을빼고 첫글자를 소문자로 한 이름 -->
		<beans:property name="serviceA" ref="serviceA"/>
		<beans:property name="serviceB" ref="serviceB"/>
		<beans:property name="serviceC" ref="serviceCImpl1"/>
		<beans:property name="serviceD" ref="serviceCImpl2"/>
		<beans:property name="c" ref="c"/>
		<beans:property name="e" ref="e"/>
		<beans:property name="f" ref="f"/>
	</beans:bean>
	
</beans:beans>
